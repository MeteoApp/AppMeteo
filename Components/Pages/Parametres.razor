@page "/parametres"
@using AppMeteo.Models
@using AppMeteo.Services.Interfaces

@inject IRoomDatalayer _roomDatalayer
@inject ToastService ToastService

<PageTitle>Paramètres</PageTitle>

<div class="dashboard container">
    <h2 class="my-4">Paramètres</h2>
    <div class="dashboard-item border p-3 mb-4">
        <h3>Configuration des pièces</h3>
        <div class="row">
            <div class="col-md-6">
                <h6>Liste des pièces</h6>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Nom</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Room item in rooms)
                        {
                            <tr>
                                <td>@item.RoomName</td>
                                <td>
                                    <Button Color="ButtonColor.Danger" @onclick="() => DeleteRoom(item)">
                                        <Icon Name="IconName.Trash" />
                                    </Button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="col-md-6">
                <h6>Ajouter une pièce</h6>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" @bind="newRoom.RoomName" placeholder="Nom de la pièce" />
                    <div class="input-group-append">
                        <Button Color="ButtonColor.Primary" @onclick=AddRoom>Ajouter</Button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Room> rooms = new List<Room>();
    private Room newRoom = new Room();

    protected override async Task OnInitializedAsync()
    {
        rooms = await _roomDatalayer.GetAllRooms();

        await base.OnInitializedAsync();
    }

    private async Task AddRoom()
    {
        await _roomDatalayer.AddRoom(newRoom);
        rooms = await _roomDatalayer.GetAllRooms();
    }

    private async Task DeleteRoom(Room room)
    {
        try
        {
            await _roomDatalayer.DeleteRoom(room.RoomId);
        
            rooms = await _roomDatalayer.GetAllRooms();
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Type = ToastType.Danger,
                    Title = "Erreur",
                    Message = ex.Message,
                    AutoHide = true
                });
        }
        
    }
}

<style>
    .dashboard {
        margin-top: 20px;
    }

    .dashboard-item {
        background-color: #f8f9fa;
        border-radius: 5px;
        padding: 20px;
    }

    .table thead th {
        background-color: #007bff;
        color: white;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
    }
</style>
