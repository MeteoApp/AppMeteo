@page "/details/{ParamRoomId:int}"
@using AppMeteo.Models
@using AppMeteo.Services.Interfaces

@inject PreloadService PreloadService
@inject IMeasuresDatalayer _measuresDatalayer
@inject ToastService ToastService

<PageTitle>Détails de la pièce</PageTitle>

@if (measures.Count == 0)
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <div class="alert alert-warning" role="alert">
                    Données en cours de chargement...
                </div>
            </div>
        </div>
    </div>
}
else 
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <h1 class="mb-4">Détails de la pièce</h1>
                <div class="row">
                    <div class="col-md-4">
                        <Card Class="mb-4 shadow-sm">
                            <CardBody>
                                <CardTitle>
                                    Infos :
                                </CardTitle>
                                <CardText>
                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item">Moyenne : @averageMeasures °C</li>
                                        <li class="list-group-item">Plus haut : @highestMeasures °C</li>
                                        <li class="list-group-item">Plus basse : @lowestMeasures °C</li>
                                    </ul>
                                </CardText>
                            </CardBody>
                        </Card>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <Grid @ref="grid" TItem="Measure" Class="table table-striped table-bordered table-hover thead-dark" 
                        DataProvider="MeasuresDataProvider"
                        AllowFiltering="true"
                        AllowSorting="true"
                        AllowPaging="true"
                        PageSize="10"
                        Responsive="true">
                            <GridColumns>
                                <GridColumn TItem="Measure" HeaderText="Date" PropertyName="Date" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" >@context.Date</GridColumn>
                                <GridColumn TItem="Measure" HeaderText="Température (°C)" PropertyName="Temperature" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" >@context.Temperature</GridColumn>
                                <GridColumn TItem="Measure" HeaderText="Humidité (%)" PropertyName="Humidity" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" >@context.Humidity</GridColumn>
                                <GridColumn TItem="Measure" HeaderText="Pression (hPa)" PropertyName="Pressure" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" >@context.Pressure</GridColumn>
                            </GridColumns>

                        </Grid>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]public int ParamRoomId { get; set; }

    private Grid<Measure> grid = default!;
    private List<Measure> measures = new List<Measure>();

    private double averageMeasures = 0;
    private double highestMeasures = 0;
    private double lowestMeasures = 0;

    protected override async Task OnInitializedAsync()
    {
        measures = await _measuresDatalayer.GetMeasuresByRoom(ParamRoomId);

        averageMeasures = measures.Average(item => item.Temperature);

        highestMeasures = measures.OrderByDescending(item => item.Temperature).First().Temperature;

        lowestMeasures = measures.OrderBy(item => item.Temperature).First().Temperature;

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                PreloadService.Show(SpinnerColor.Light, "Chargement des données...");
            }

            await base.OnAfterRenderAsync(firstRender);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Type = ToastType.Danger,
                    Title = "Erreur",
                    Message = ex.Message,
                    AutoHide = true
                });
        }
    }

    private  async Task<GridDataProviderResult<Measure>> MeasuresDataProvider(GridDataProviderRequest<Measure> request)
    {
        return await Task.FromResult(request.ApplyTo(measures));   
    }
}

<style>
    .table {
        margin-top: 20px;
    }

    .table th, .table td {
        text-align: center;
        vertical-align: middle;
    }

    .table-hover tbody tr:hover {
        background-color: #f5f5f5;
    }

    .thead-dark th {
        background-color: #343a40;
        color: white;
    }

    .card {
        border-radius: 10px;
    }

    .card-title {
        font-weight: bold;
        color: #007bff;
    }
</style>


