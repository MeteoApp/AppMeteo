@page "/details/{ParamRoomId:int}"
@using AppMeteo.Models
@using AppMeteo.Services.Interfaces

@inject PreloadService PreloadService
@inject IMeasuresDatalayer _measuresDatalayer
@inject ToastService ToastService

<PageTitle>Détails de la pièce</PageTitle>

@if (measures.Count == 0)
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <div class="alert alert-warning" role="alert">
                    Aucune donnée à afficher.
                </div>
            </div>
        </div>
    </div>
}
else 
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <h1 class="mb-4">Détails de la pièce</h1>
                <div class="row">
                    <div class="col-md-9">
                        <LineChart @ref="lineChart" Width="800" />
                    </div>
                    <div class="col-md-3">
                        <Card Class="mb-4 shadow-sm">
                            <CardBody>
                                <CardTitle>
                                    Infos :
                                </CardTitle>
                                <CardText>
                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item">Moyenne : @averageMeasures °C</li>
                                        <li class="list-group-item">Plus haut : @highestMeasures °C</li>
                                        <li class="list-group-item">Plus basse : @lowestMeasures °C</li>
                                    </ul>
                                </CardText>
                            </CardBody>
                        </Card>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <table class="table table-striped table-bordered table-hover">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Date</th>
                                    <th>Température (°C)</th>
                                    <th>Humidité (%)</th>
                                    <th>Pression (hPa)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (Measure measure in measures)
                                {
                                    <tr>
                                        <td>@measure.Date.ToString("dd/MM/yyyy HH:mm")</td>
                                        <td>@measure.Temperature</td>
                                        <td>@measure.Humidity</td>
                                        <td>@measure.Pressure</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]public int ParamRoomId { get; set; }
    private List<Measure> measures = new List<Measure>();

    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private double averageMeasures = 0;
    private double highestMeasures = 0;
    private double lowestMeasures = 0;

    protected override async Task OnInitializedAsync()
    {
        measures = await _measuresDatalayer.GetMeasuresByRoom(ParamRoomId);

        averageMeasures = measures.Average(item => item.Temperature);

        highestMeasures = measures.OrderByDescending(item => item.Temperature).First().Temperature;

        lowestMeasures = measures.OrderBy(item => item.Temperature).First().Temperature;

        var colors = ColorUtility.CategoricalTwelveColors;

        var labels = measures.Select(m => m.Date.ToString("dd/MM/yyyy HH:mm")).ToList();
        var datasets = new List<IChartDataset>();

        var dataset1 = new LineChartDataset
            {
                Label = "Température (°C)",
                Data = measures.Select(m => m.Temperature).Cast<double?>().ToList(),
                BackgroundColor = colors[0],
                BorderColor = colors[0],
                BorderWidth = 2,
                HoverBorderWidth = 4,
            };
        datasets.Add(dataset1);

        var dataset2 = new LineChartDataset
            {
                Label = "Humidité (%)",
                Data = measures.Select(m => m.Humidity).Cast<double?>().ToList(),
                BackgroundColor = colors[1],
                BorderColor = colors[1],
                BorderWidth = 2,
                HoverBorderWidth = 4,
            };
        datasets.Add(dataset2);

        var dataset3 = new LineChartDataset
            {
                Label = "Pression (hPa)",
                Data = measures.Select(m => m.Pressure).Cast<double?>().ToList(),
                BackgroundColor = colors[2],
                BorderColor = colors[2],
                BorderWidth = 2,
                HoverBorderWidth = 4,
            };
        datasets.Add(dataset3);

        chartData = new ChartData { Labels = labels, Datasets = datasets };

        lineChartOptions = new();
        lineChartOptions.Locale = "fr-FR";
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Plugins.Title!.Text = "Données";
        lineChartOptions.Plugins.Title.Display = true;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                PreloadService.Show(SpinnerColor.Light, "Chargement des données...");

                if (chartData == default!)
                {
                    throw new Exception("Les données du graphique sont nulles.");
                }
                
                await lineChart.InitializeAsync(chartData, lineChartOptions);
            }

            await base.OnAfterRenderAsync(firstRender);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Type = ToastType.Danger,
                    Title = "Erreur",
                    Message = ex.Message,
                    AutoHide = true
                });
        }
    }
}

<style>
    .table {
        margin-top: 20px;
    }

    .table th, .table td {
        text-align: center;
        vertical-align: middle;
    }

    .table-hover tbody tr:hover {
        background-color: #f5f5f5;
    }

    .thead-dark th {
        background-color: #343a40;
        color: white;
    }

    .card {
        border-radius: 10px;
    }

    .card-title {
        font-weight: bold;
        color: #007bff;
    }
</style>


